<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:vm="clr-namespace:WPFSpyn.ViewModel"
    xmlns:vw="clr-namespace:WPFSpyn.View"
    >

    
 


    <!-- 
  This template applies an AllSyncPairsView to an instance 
  of the AllSyncPairsViewModel class shown in the main window.
  -->
    <DataTemplate DataType="{x:Type vm:AllSyncPairsViewModel}">
        <vw:AllSyncPairsView />
    </DataTemplate>

    <!-- 
  This template applies a SyncPairView to an instance  
  of the SyncPairViewModel class shown in the main window.
  -->
    <DataTemplate DataType="{x:Type vm:SyncPairViewModel}">
        <vw:SyncPairView />
    </DataTemplate>

    <!-- 
  This style configures both of the main content areas in the main window.
  -->
    <Style x:Key="MainHCCStyle" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border 
                        Background="{StaticResource Brush_HeaderBackground}" 
                        BorderBrush="#EEC0C0C0" 
                        BorderThickness="1" 
                        CornerRadius="5" 
                        Margin="0" 
                        Padding="4" 
                        SnapsToDevicePixels="True" 
                        >
                        <TextBlock 
                            FontSize="32"
                            Text="{TemplateBinding Content}" 
                            Style="{StaticResource HeaderTextStyle}"
                            >
                            <TextBlock.Effect>
                                <DropShadowEffect 
                                    Direction="90"
                                    />
                            </TextBlock.Effect>
                        </TextBlock>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                
                <!-- 
        This template ensures that content of a HeaderedContentControl 
        fills the available vertical space. 
        -->
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel>
                        <ContentPresenter 
              DockPanel.Dock="Top"
              ContentSource="Header" 
              ContentTemplate="{TemplateBinding HeaderTemplate}" 
              />
                        <ContentPresenter 
              ContentSource="Content" 
              ContentTemplate="{TemplateBinding ContentTemplate}" 
              />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- 
  This style configures buttons at top of the main.
  -->
    <Style x:Key="MainHBTNStyle" TargetType="{x:Type  Button}">
        <Setter Property="Background" Value="{StaticResource Brush_HeaderBackground}"/>
        <Setter Property="Foreground" Value="WhiteSmoke"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Bold"/>

        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FF00FFFF" Offset="0"/>
                    <GradientStop Color="#FF008B8B" Offset="0.375"/>
                    <GradientStop Color="#FF718597" Offset="0.375"/>
                    <GradientStop Color="#FF617584" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter> 
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="Background" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{x:Null}"/>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="Opacity" To="1"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[0].(GradientStop.Color)" To="PaleTurquoise"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)" To="Teal"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[2].(GradientStop.Color)" To="DarkCyan"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[3].(GradientStop.Color)" To="PaleTurquoise"/>
                                    </Storyboard>

                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" To="MidnightBlue" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="contentPresenter"/>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="Opacity" To="1"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[0].(GradientStop.Color)" To="Teal"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)" To="PaleTurquoise"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[2].(GradientStop.Color)" To="PaleTurquoise"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[3].(GradientStop.Color)" To="DarkCyan"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" To="MidnightBlue" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="contentPresenter"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="Background" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="MediumAquamarine"/>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="Opacity" To="1"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[0].(GradientStop.Color)" To="Teal"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)" To="Aquamarine"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[2].(GradientStop.Color)" To="Aquamarine"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Rectangle.Fill).(GradientBrush.GradientStops)[3].(GradientStop.Color)" To="DarkCyan"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="DisabledVisualElement" Storyboard.TargetProperty="Opacity" To=".55"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity" To="1"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background" CornerRadius="3" Background="Azure" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                            <Grid Background="{TemplateBinding Background}"  Margin="3">
                               <Border Opacity="0"  x:Name="BackgroundAnimation" Background="Black" /> 
                                <Rectangle x:Name="BackgroundGradient" >
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint=".7,0" EndPoint=".7,1">
                                            <GradientStop Color="#FFFFFFFF" Offset="0" />
                                            <GradientStop Color="#F9FFFFFF" Offset="0.375" />
                                            <GradientStop Color="#E5FFFFFF" Offset="0.625" />
                                            <GradientStop Color="#C6FFFFFF" Offset="1" />
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Grid>
                        </Border>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            />
                        <Rectangle 
                            x:Name="DisabledVisualElement" 
                            Fill="#FFFFFFFF" 
                            IsHitTestVisible="false" 
                            Opacity="0" 
                            RadiusX="3" 
                            RadiusY="3" 
                            />
                        <Rectangle 
                            x:Name="FocusVisualElement" 
                            IsHitTestVisible="false" 
                            Margin="1" 
                            Opacity="0" 
                            RadiusX="2" 
                            RadiusY="2" 
                            Stroke="#FF6DBDD1" 
                            StrokeThickness="1" 
                            />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Background" Property="BorderBrush" Value="Pink" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent"/>
        </Style.Resources>

    </Style>


    <!--
  This style ensures that the borders in the main window are consistent.
  -->
    <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>
   
    
    <!--
    This style ensures that static text on main status bar is consistent.
    -->
    <Style x:Key="StatusBarTextBlockStyle" BasedOn="{StaticResource HeaderTextStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect 
                    Direction="275"
                    />
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="14" />
    </Style>
    
    
    <!--
    This style is intended to keep the status bar consistent.
    -->
    <Style x:Key="MainStatusBarStyle" TargetType="{x:Type StatusBar}" >
        <Setter Property="Background" Value="{StaticResource Brush_HeaderBackground}" />
    </Style>


    <!--
    This style is intended to keep the status bar consistent.
    -->
    <Style x:Key="MainGridStyle" TargetType="{x:Type Grid}" >

        <Setter Property="Background">
            <Setter.Value>
            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                <GradientStop Color="Silver" Offset="0"/>
                <GradientStop Color="MediumAquamarine" Offset="1"/>
            </LinearGradientBrush>
            </Setter.Value>
        </Setter>

    </Style>

    <!--
    This style is intended to keep the local host textblock settings.
    -->
    <Style x:Key="LocalHostTextBlockStyle" TargetType="{x:Type TextBlock}" >
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="Blue" />
    </Style>


    <!--
    This style is intended to keep the remote host textblock settings.
    -->
    <Style x:Key="RemoteHostTextBlockStyle" TargetType="{x:Type TextBox}" >
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="Red" />
    </Style>

    
    <Style x:Key="CommandsButton" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="100" />
        <Setter Property="Width" Value="100" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Ellipse Stroke="Transparent"
                         StrokeThickness="2">
                            <Ellipse.Fill>
                                <RadialGradientBrush>
                                    <GradientStop Offset="0"
                                          Color="Aqua" />
                                    <GradientStop Offset="0.5"
                                                  Color="MidnightBlue" />
                                    <GradientStop Offset="1"
                                          Color="MediumAquamarine" />
                                    <RadialGradientBrush.Transform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1.36" />
                                        </TransformGroup>
                                    </RadialGradientBrush.Transform>
                                </RadialGradientBrush>
                            </Ellipse.Fill>
                        </Ellipse>
                        <ContentPresenter HorizontalAlignment="Center"
                                  VerticalAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
  This template explains how to render the list of commands on the left
  side in the main window (the 'Control Panel' area).
  -->
    <DataTemplate x:Key="CommandsTemplate">
        <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Margin="6,2">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <TextBlock Margin="2,6"
                               TextAlignment="Center"
                               >
                        <Button 
                            Command="{Binding Path=Command}"
                            Style="{StaticResource CommandsButton}"
                            >
                            <TextBlock 
                                Text="{Binding Path=DisplayName}" 
                                Style="{StaticResource HeaderTextStyle}"
                                />
                        </Button>
                    </TextBlock>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>


    <!-- 
  This template explains how to render 
  a tab item with a close button.
  -->
    <DataTemplate x:Key="ClosableTabItemTemplate">
        <DockPanel 
            Background="Transparent"
            Width="120"
            >
            <Button 
                Background="Transparent"
                Command="{Binding Path=CloseCommand}"
                Content="X"
                Cursor="Hand"
                DockPanel.Dock="Right"
                Focusable="False"
                FontFamily="Courier" 
                FontSize="9"
                FontWeight="ExtraBold"  
                Foreground="LightCoral"
                Margin="0,1,0,0"
                Padding="0"
                VerticalContentAlignment="Bottom"
                Width="16" Height="16" 
                />
            <ContentPresenter 
                Content="{Binding Path=DisplayName}" 
                VerticalAlignment="Center" 
                >
            </ContentPresenter>
        </DockPanel>
    </DataTemplate>


    <!--
  This template explains how to render the 'Workspace' content area in the main window.
  -->
    <DataTemplate x:Key="WorkspacesTemplate">
        <TabControl 
            BorderBrush="Transparent"
            Background="{x:Null}"
            IsSynchronizedWithCurrentItem="True" 
            ItemsSource="{Binding}" 
            ItemTemplate="{StaticResource ClosableTabItemTemplate}" 
            Padding="0"
            >
            <TabControl.Resources>
                <Style TargetType="{x:Type TabItem}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Grid>
                                    <Border 
                                        Name="Border" 
                                        Margin="0,0,0,0" 
                                        Background="Transparent"
                                        BorderBrush="Black" 
                                        BorderThickness="1,1,1,1" 
                                        CornerRadius="3,6,1,1"
                                        >
                                        <ContentPresenter 
                                            x:Name="ContentSite" 
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Center"
                                            ContentSource="Header" 
                                            Margin="12,2,12,2"
                                            RecognizesAccessKey="True"
                                            >
                                        </ContentPresenter>
                                    </Border>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Panel.ZIndex" Value="100" />
                                        <Setter TargetName="Border" Property="Background" Value="{StaticResource Brush_HeaderBackground}" />
                                        <Setter TargetName="Border" Property="BorderThickness" Value="3,1,1,1" />
                                        <Setter TargetName="Border" Property="BorderBrush" Value="Aqua" />
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter TargetName="Border" Property="Background" Value="DarkRed" />
                                        <Setter TargetName="Border" Property="BorderBrush" Value="Black" />
                                        <Setter Property="Foreground" Value="DarkGray" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </TabControl.Resources>
        </TabControl>
    </DataTemplate>
    
    
</ResourceDictionary>