<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:vm="clr-namespace:WPFSpyn.ViewModel"
    xmlns:vw="clr-namespace:WPFSpyn.View"
    >


    <!-- 
  This template applies an AllSyncPairsView to an instance 
  of the AllSyncPairsViewModel class shown in the main window.
  -->
    <DataTemplate DataType="{x:Type vm:AllSyncPairsViewModel}">
        <vw:AllSyncPairsView />
    </DataTemplate>

    <!-- 
  This template applies a SyncPairView to an instance  
  of the SyncPairViewModel class shown in the main window.
  -->
    <DataTemplate DataType="{x:Type vm:SyncPairViewModel}">
        <vw:SyncPairView />
    </DataTemplate>


    <!-- 
  This template applies a SyncView to an instance  
  of the SyncViewModel class shown in the main window.
  -->
    <DataTemplate DataType="{x:Type vm:SyncViewModel}">
        <vw:SyncView />
    </DataTemplate>


    <!-- 
  This style configures both of the main content areas in the main window.
  -->
    <Style x:Key="MainHCCStyle" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border 
                        Background="{StaticResource Brush_HeaderBackground}" 
                        BorderBrush="#EEC0C0C0" 
                        BorderThickness="1" 
                        CornerRadius="5" 
                        Margin="0" 
                        Padding="4" 
                        SnapsToDevicePixels="True" 
                        >
                        <TextBlock 
                            FontSize="32"
                            Text="{TemplateBinding Content}" 
                            Style="{StaticResource HeaderTextStyle}"
                            >
                        </TextBlock>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <!-- 
                This template ensures that content of a HeaderedContentControl 
                fills the available vertical space. 
                -->
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel>
                        <ContentPresenter 
                            DockPanel.Dock="Top"
                            ContentSource="Header" 
                            ContentTemplate="{TemplateBinding HeaderTemplate}" 
                            />
                        <ContentPresenter 
                            ContentSource="Content" 
                            ContentTemplate="{TemplateBinding ContentTemplate}" 
                            />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--
  This style ensures that the borders in the main window are consistent.
  -->
    <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>
   
    
    <!--
    This style ensures that static text on main status bar is consistent.
    -->
    <Style x:Key="StatusBarTextBlockStyle" BasedOn="{StaticResource HeaderTextStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="14" />
    </Style>
    
    
    <!--
    This style is intended to keep the status bar consistent.
    -->
    <Style x:Key="MainStatusBarStyle" TargetType="{x:Type StatusBar}" >
        <Setter Property="Background" Value="{StaticResource Brush_HeaderBackground}" />
    </Style>


    <!--
    This style is intended to keep the status bar consistent.
    -->
    <Style x:Key="MainGridStyle" TargetType="{x:Type Grid}" >
        <Setter Property="Background" Value="Snow" />
    </Style>

    <!--
    This style is intended to keep the local host textblock settings.
    -->
    <Style x:Key="LocalHostTextBlockStyle" TargetType="{x:Type TextBlock}" >
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="Blue" />
    </Style>


    <!--
    This style is intended to keep the remote host textblock settings.
    -->
    <Style x:Key="RemoteHostTextBlockStyle" TargetType="{x:Type TextBox}" >
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="Red" />
    </Style>


    <!--
    This style is intended to keep the commands button settings.
    -->
    <Style x:Key="MainHBTNStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MainBTNStyle}">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Height" Value="100" />
        <Setter Property="Width" Value="100" />
    </Style>


    <!--
    This style is intended to keep the commands button settings.
    -->
    <Style x:Key="CommandsButton" TargetType="{x:Type Button}" BasedOn="{StaticResource MainBTNStyle}">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Height" Value="100" />
        <Setter Property="Width" Value="100" />
    </Style>


    <!--
  This template explains how to render the list of commands on the left
  side in the main window (the 'Control Panel' area).
  -->
    <DataTemplate x:Key="CommandsTemplate">
        <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Margin="6,2">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <TextBlock Margin="2,6"
                               TextAlignment="Center"
                               >
                        <Button 
                            Command="{Binding Path=Command}"
                            Style="{StaticResource CommandsButton}"
                            >
                            <TextBlock 
                                Text="{Binding Path=DisplayName}" 
                                />
                        </Button>
                    </TextBlock>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>


    <!-- 
  This template explains how to render 
  a tab item with a close button.
  -->
    <DataTemplate x:Key="ClosableTabItemTemplate">
        <DockPanel 
            Background="Transparent"
            Width="120"
            >
            <Button 
                Background="Transparent"
                Command="{Binding Path=CloseCommand}"
                Content="X"
                Cursor="Hand"
                DockPanel.Dock="Right"
                Focusable="False"
                FontFamily="Courier" 
                FontSize="9"
                FontWeight="ExtraBold"  
                Foreground="LightCoral"
                Margin="0,1,0,0"
                Padding="0"
                VerticalContentAlignment="Bottom"
                Width="16" Height="16" 
                />
            <ContentPresenter 
                Content="{Binding Path=DisplayName}" 
                VerticalAlignment="Center" 
                >
            </ContentPresenter>
        </DockPanel>
    </DataTemplate>


    <!--
  This template explains how to render the 'Workspace' content area in the main window.
  -->
    <DataTemplate x:Key="WorkspacesTemplate">
        <TabControl 
            BorderBrush="Transparent"
            Background="{x:Null}"
            IsSynchronizedWithCurrentItem="True" 
            ItemsSource="{Binding}" 
            ItemTemplate="{StaticResource ClosableTabItemTemplate}" 
            Padding="0"
            >
            <TabControl.Resources>
                <Style TargetType="{x:Type TabItem}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Grid>
                                    <Border 
                                        Name="Border" 
                                        Margin="0,0,0,0" 
                                        Background="Transparent"
                                        BorderBrush="Silver" 
                                        BorderThickness="1,1,1,1" 
                                        CornerRadius="3,6,1,1"
                                        >
                                        <ContentPresenter 
                                            x:Name="ContentSite" 
                                            ContentSource="Header" 
                                            HorizontalAlignment="Center"
                                            Margin="12,2,12,2"
                                            Opacity="0.5"
                                            RecognizesAccessKey="True"
                                            TextBlock.FontWeight="Bold"
                                            VerticalAlignment="Center"
                                            >
                                        </ContentPresenter>
                                    </Border>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="Panel.ZIndex" Value="100" />
                                        <Setter TargetName="Border" Property="Background" Value="{StaticResource Brush_HeaderBackground}" />
                                        <Setter TargetName="Border" Property="BorderThickness" Value="3,1,1,1" />
                                        <Setter TargetName="Border" Property="BorderBrush" Value="#7F00FFFF" />
                                        <Setter TargetName="ContentSite"  Property="Opacity" Value="1" />
                                        <Setter TargetName="ContentSite"  Property="TextBlock.FontSize" Value="13" />
                                        <Setter TargetName="ContentSite"  Property="TextBlock.FontWeight" Value="ExtraBold" />
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter TargetName="Border" Property="Background" Value="DarkRed" />
                                        <Setter TargetName="Border" Property="BorderBrush" Value="Snow" />
                                        <Setter Property="Foreground" Value="DarkGray" />
                                        <Setter Property="Opacity" Value="0.5" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </TabControl.Resources>
        </TabControl>
    </DataTemplate>
    
    
</ResourceDictionary>